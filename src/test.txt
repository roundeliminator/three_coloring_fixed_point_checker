Case 1
∅^(+1*d+1) CX^(+1*d) ACX^(+1*Δ-2*d-1)    
X^(+2*d+1) ACX^(+1*Δ-2*d-1)    
X^(+1*d) AX^(+1*Δ-1*d)    

Case 2
∅^(+1*d+1) CY^(+1*d) BCY^(+1*Δ-2*d-1)    
Y^(+2*d+1) BCY^(+1*Δ-2*d-1)    
Y^(+1*d) BY^(+1*Δ-1*d)    

Case 3
∅^(+1*d+1) CX^(+1*d+1) ACXY+^(+1*d) ABCXY+^(+1*Δ-3*d-2)         ( +1*Δ-3*d-3 >= 0    )
∅^(+1*d+1) CX^(+1*d+1) ACXY+^(+1*Δ-2*d-2)         ( -1*Δ+3*d+2 >= 0    )
X^(+2*d+2) ACXY+^(+1*d) ABCXY+^(+1*Δ-3*d-2)         ( +1*Δ-3*d-3 >= 0    )
X^(+2*d+2) ACXY+^(+1*Δ-2*d-2)         ( -1*Δ+3*d+2 >= 0    )
X^(+1*d+1) AXY+^(+2*d+1) ABCXY+^(+1*Δ-3*d-2)         ( +1*Δ-3*d-3 >= 0    )
X^(+1*d+1) AXY+^(+1*Δ-1*d-1)         ( -1*Δ+3*d+2 >= 0    )
X^(+1*d+1) AXY+^(+1*d) ABXY+^(+1*Δ-2*d-1)    

Case 4
∅^(+1*d+1) CY^(+1*d+1) BCXY+^(+1*d) ABCXY+^(+1*Δ-3*d-2)         ( +1*Δ-3*d-3 >= 0    )
∅^(+1*d+1) CY^(+1*d+1) BCXY+^(+1*Δ-2*d-2)         ( -1*Δ+3*d+2 >= 0    )
Y^(+2*d+2) BCXY+^(+1*d) ABCXY+^(+1*Δ-3*d-2)         ( +1*Δ-3*d-3 >= 0    )
Y^(+2*d+2) BCXY+^(+1*Δ-2*d-2)         ( -1*Δ+3*d+2 >= 0    )
Y^(+1*d+1) BXY+^(+2*d+1) ABCXY+^(+1*Δ-3*d-2)         ( +1*Δ-3*d-3 >= 0    )
Y^(+1*d+1) BXY+^(+1*Δ-1*d-1)         ( -1*Δ+3*d+2 >= 0    )
Y^(+1*d+1) BXY+^(+1*d) ABXY+^(+1*Δ-2*d-1)    

Case 5
∅^(+1*d+2) CXY^(+1*k) ACXY+^(+1*d-1*k) BCXY+^(+1*d-1*k) ABCXY+^(+1*Δ-3*d+1*k-2)         ( +1*k >= 0,   +1*d-1*k >= 0,   +1*Δ-3*d+1*k-2 >= 0    )
∅^(+1) XY^(+1*d+1*k+1) ACXY+^(+1*d-1*k) BCXY+^(+1*d-1*k) ABCXY+^(+1*Δ-3*d+1*k-2)         ( +1*k >= 0,   +1*d-1*k >= 0,   +1*Δ-3*d+1*k-2 >= 0    )
∅^(+1) XY^(+1*k) AXY+^(+2*d-1*k+1) BCXY+^(+1*d-1*k) ABCXY+^(+1*Δ-3*d+1*k-2)         ( +1*k >= 0,   +1*d-1*k >= 0,   +1*Δ-3*d+1*k-2 >= 0    )
∅^(+1) XY^(+1*k) ACXY+^(+1*d-1*k) BXY+^(+2*d-1*k+1) ABCXY+^(+1*Δ-3*d+1*k-2)         ( +1*k >= 0,   +1*d-1*k >= 0,   +1*Δ-3*d+1*k-2 >= 0    )
∅^(+1) XY^(+1*k) AXY+^(+1*d-1*k) BXY+^(+1*d-1*k) ABXY+^(+1*Δ-2*d+1*k-1)         ( +1*k >= 0,   +1*d-1*k >= 0,   +1*Δ-2*d+1*k-1 >= 0    )

Case 6
∅^(+1*d+1) CXY^(+1*k) CXY+^(+2*d-2*k+3) ABCXY+^(+1*Δ-3*d+1*k-4)         ( +1*k-2 >= 0,   +1*d-1*k+1 >= 0,   +1*Δ-3*d+1*k-5 >= 0    )
∅^(+1*d+1) CXY^(+1*k) CXY+^(+1*Δ-1*d-1*k-1)         ( +1*k-2 >= 0,   +1*d-1*k+1 >= 0,   -1*Δ+3*d-1*k+4 >= 0    )
XY^(+1*d+1*k+1) CXY+^(+2*d-2*k+3) ABCXY+^(+1*Δ-3*d+1*k-4)         ( +1*k-2 >= 0,   +1*d-1*k+1 >= 0,   +1*Δ-3*d+1*k-5 >= 0    )
XY^(+1*d+1*k+1) CXY+^(+1*Δ-1*d-1*k-1)         ( +1*k-2 >= 0,   +1*d-1*k+1 >= 0,   -1*Δ+3*d-1*k+4 >= 0    )
XY^(+1*k) XY+^(+3*d-2*k+4) ABCXY+^(+1*Δ-3*d+1*k-4)         ( +1*k-2 >= 0,   +1*d-1*k+1 >= 0,   +1*Δ-3*d+1*k-5 >= 0    )
XY^(+1*k) XY+^(+1*Δ-1*k)         ( +1*k-2 >= 0,   +1*d-1*k+1 >= 0,   -1*Δ+3*d-1*k+4 >= 0    )
XY^(+1*k) XY+^(+2*d-2*k+3) ABXY+^(+1*Δ-2*d+1*k-3)         ( +1*k-2 >= 0,   +1*d-1*k+1 >= 0,   +1*Δ-2*d+1*k-4 >= 0    )
XY^(+1*k) XY+^(+1*Δ-1*k)         ( +1*k-2 >= 0,   +1*d-1*k+1 >= 0,   -1*Δ+2*d-1*k+3 >= 0    )

Case 7
∅^(+1*d) C^(+1*Δ-1*d)    

What do you want to do? (write 1 or 2 and press enter)
1) Test all cases (takes roughly 5 minutes, requires sage to be installed)
2) Choose a pair of lines and see the generated inequalities


From which case do you want the first line? (write a number from 1 to 7 and press enter)


Please choose a line among the following ones: (write a number from 1 to 3 and press enter)
1) ∅^(+1*d+1) CX^(+1*d) ACX^(+1*Δ-2*d-1)    
2) X^(+2*d+1) ACX^(+1*Δ-2*d-1)    
3) X^(+1*d) AX^(+1*Δ-1*d)    


From which case do you want the second line? (write a number from 1 to 7 and press enter)


Please choose a line among the following ones: (write a number from 1 to 3 and press enter)
1) ∅^(+1*d+1) CY^(+1*d) BCY^(+1*Δ-2*d-1)    
2) Y^(+2*d+1) BCY^(+1*Δ-2*d-1)    
3) Y^(+1*d) BY^(+1*Δ-1*d)    


You chose to combine 1.1 with 2.1, that is, the following two lines:
∅^(+1*d+1) CX^(+1*d) ACX^(+1*Δ-2*d-1)    
∅^(+1*d+1) CY^(+1*d) BCY^(+1*Δ-2*d-1)    


From the observations in the paper, only the following Sup are worth being considered:
1) Sup(ACX,BCY) = C

Please choose which one you want to consider (write a number from 1 to 1 and press enter)


In the following, you will find written the input that is given to sage to test unsolvability.
Please note that, if, while providing the input to sage, it fails with the message
  'argument must be a linear function or constraint, got False',
it means that one of the generated constrains already evaluated to False, and hence the system of inequalities is unsolvable.
Otherwise, non-solvability is given by the error
  'The problem or its dual has been proven infeasible'.
Press enter to see the inputs.


sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(+1*k_2 +1 <= 0)
p.add_constraint( + 0 -1 >= 0)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(+1*k_2 +1 <= 0)
p.add_constraint(x_00 + 0 -1 >= +1*d)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(+1*k_2 +1 <= 0)
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20+x_21+x_22 + 1 -1 >= +1*Δ)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(+1*d-1*k_2 +1 <= 0)
p.add_constraint( + 0 -1 >= 0)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(+1*d-1*k_2 +1 <= 0)
p.add_constraint(x_00 + 0 -1 >= +1*d)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(+1*d-1*k_2 +1 <= 0)
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20+x_21+x_22 + 1 -1 >= +1*Δ)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(+1*Δ-3*d+1*k_2-2 +1 <= 0)
p.add_constraint( + 0 -1 >= 0)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(+1*Δ-3*d+1*k_2-2 +1 <= 0)
p.add_constraint(x_00 + 0 -1 >= +1*d)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(+1*Δ-3*d+1*k_2-2 +1 <= 0)
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20+x_21+x_22 + 1 -1 >= +1*Δ)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint( + 0 -1 >= 0)
p.add_constraint( + 0 -1 >= 0)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint( + 0 -1 >= 0)
p.add_constraint(x_00 + 0 -1 >= +1*d)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint( + 0 -1 >= 0)
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20+x_21+x_22 + 1 -1 >= +1*Δ)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(x_00+x_01+x_02+x_10+x_20 + 1 -1 >= +1*d+2)
p.add_constraint( + 0 -1 >= 0)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(x_00+x_01+x_02+x_10+x_20 + 1 -1 >= +1*d+2)
p.add_constraint(x_00 + 0 -1 >= +1*d)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(x_00+x_01+x_02+x_10+x_20 + 1 -1 >= +1*d+2)
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20+x_21+x_22 + 1 -1 >= +1*Δ)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_20 + 1 -1 >= +1*d+1*k_2+2)
p.add_constraint( + 0 -1 >= 0)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_20 + 1 -1 >= +1*d+1*k_2+2)
p.add_constraint(x_00 + 0 -1 >= +1*d)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_20 + 1 -1 >= +1*d+1*k_2+2)
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20+x_21+x_22 + 1 -1 >= +1*Δ)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_20+x_21 + 1 -1 >= +2*d+2)
p.add_constraint( + 0 -1 >= 0)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_20+x_21 + 1 -1 >= +2*d+2)
p.add_constraint(x_00 + 0 -1 >= +1*d)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_20+x_21 + 1 -1 >= +2*d+2)
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20+x_21+x_22 + 1 -1 >= +1*Δ)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20 + 1 -1 >= +2*d+2)
p.add_constraint( + 0 -1 >= 0)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20 + 1 -1 >= +2*d+2)
p.add_constraint(x_00 + 0 -1 >= +1*d)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20 + 1 -1 >= +2*d+2)
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20+x_21+x_22 + 1 -1 >= +1*Δ)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20+x_21 + 1 -1 >= +3*d-1*k_2+2)
p.add_constraint( + 0 -1 >= 0)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20+x_21 + 1 -1 >= +3*d-1*k_2+2)
p.add_constraint(x_00 + 0 -1 >= +1*d)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20+x_21 + 1 -1 >= +3*d-1*k_2+2)
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20+x_21+x_22 + 1 -1 >= +1*Δ)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20+x_21+x_22 + 1 -1 >= +1*Δ)
p.add_constraint( + 0 -1 >= 0)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20+x_21+x_22 + 1 -1 >= +1*Δ)
p.add_constraint(x_00 + 0 -1 >= +1*d)
p.solve()




sage.misc.reset.reset()
p = MixedIntegerLinearProgram()
v = p.new_variable(nonnegative=True)
w = p.new_variable()
Δ = v['Δ']
d = v['d']
k_0 = v['k_0']
k_1 = v['k_1']
x_00 = v['x_00']
x_01 = v['x_01']
x_02 = v['x_02']
x_10 = v['x_10']
x_11 = v['x_11']
x_12 = v['x_12']
x_20 = v['x_20']
x_21 = v['x_21']
x_22 = v['x_22']
p.set_objective(0)
# generic assumptions
p.add_constraint(+1*d-1 >= 0)
p.add_constraint(-1*Δ+2*d+4 >= 0)
p.add_constraint(+1*Δ-2*d-3 >= 0)
p.add_constraint(+1*Δ-5 >= 0)
# assumptions of original lines
# assumptions of new line
p.add_constraint(x_00+x_01+x_02 + 0 == +1*d+1)
p.add_constraint(x_10+x_11+x_12 + 0 == +1*d)
p.add_constraint(x_20+x_21+x_22 + 1 == +1*Δ-2*d-1)
p.add_constraint(x_00+x_10+x_20 + 0 == +1*d+1)
p.add_constraint(x_01+x_11+x_21 + 0 == +1*d)
p.add_constraint(x_02+x_12+x_22 + 1 == +1*Δ-2*d-1)
k_2 = w['k_2']
k_3 = w['k_3']
p.add_constraint(k_2 == x_11)
# negated one per target case
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20+x_21+x_22 + 1 -1 >= +1*Δ)
p.add_constraint(x_00+x_01+x_02+x_10+x_11+x_12+x_20+x_21+x_22 + 1 -1 >= +1*Δ)
p.solve()


